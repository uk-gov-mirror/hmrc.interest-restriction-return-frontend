package assets

object PageTitles {
  val restrictionAmountSameAP = "Enter the restriction amount for this company"
  val addRestriction = "Do you need to add a restriction to this company?"
  val companyAccountingPeriodSameAsGroup = "Is this company’s accounting period the same as the group’s period of account?"
  val partnershipDeletionConfirmation: String => String = name => s"Are you sure you want to delete partnership ‘$name’?"
  val partnershipsReviewAnswersList: Int => String = i => s"$i partnership${if (i > 1) 's'} added"
  val addAnReactivationQuery = "Do you need to add a reactivation to this company?"
  val reactivationAmount = "Add a reactivation amount"
  val reviewReactivations = "Review reactivations for companies in the group"
  val accountingPeriodStart = "When does the worldwide period of account start?"
  val accountingPeriodEnd = "When does the worldwide period of account end?"
  val reviewAndComplete = "Interest Restriction Return"
  val checkAnswersUkCompany: String => String = name => s"Check $name details"
  val derivedCompany = "Check the totals for this return"
  val companyDetails = "Company details"
  val aboutAddingUKCompanies = "In this section you will need to tell us about eligible UK companies in the group"
  val netTaxInterestAmount: String => String = name => s"What is the $name’${if (name.last.toLower != 's') 's'} total net-tax interest income?"
  val investorGroupsDeletionConfirmation: String => String = name => s"Are you sure you want to delete investor group ‘$name’?"
  val investmentsDeletionConfirmation: String => String = name => s"Are you sure you want to delete investment ‘$name’?"
  val investmentName = "Enter the name of the investment"
  val deletionConfirmation: String => String = name => s"Are you sure you want to delete deemed parent ‘$name’?"
  val ukCompaniesDeletionConfirmation: String => String = name => s"Are you sure you want to delete company ‘$name’?"
  val consentingCompany = "Is this a consenting company?"
  val netTaxInterestIncomeOrExpense: String => String = name => s"Which net tax-interest does $name have?"
  val partnershipSAUTR: String => String = name => s"Enter $name’${if (name.last.toLower != 's') 's'} Self Assessment Unique Taxpayer Reference"
  val isUkPartnership: String => String = name => s"Is $name a UK Partnership?"
  val deemedParentReviewAnswersList: Int => String = i => s"$i deemed parent${if (i > 1) 's'} added"
  val investmentsReviewAnswersList: Int => String = i => s"$i investsment${if (i > 1) 's'} added for Interest Allowance (non-consolidated investments) election"
  val partnershipName = "Enter the name of the partnership"
  val investorRatioMethod = "Which ratio do you want to elect for this investor group?"
  val investorGroupName = "Enter the name of the investor group"
  val addInvestorGroup = "Do you want to add an investor group?"
  val otherInvestorGroupElections = "Which other elections apply to this investor group?"
  val groupEBITDA = "Enter the group-EBITDA"
  val interestAllowanceConsolidatedPshipElection = "Do you want to make an interest allowance election for consolidated partnerships?"
  val electedInterestAllowanceConsolidatedPshipBefore = "Has the group made an interest allowance election for consolidated partnerships in any previous returns?"
  val interestAllowanceNonConsolidatedInvestmentsElection = "Do you want to make an interest allowance election for non-consolidated investments?"
  val groupRatioPercentage = "Enter the group ratio percentage"
  val interestAllowanceAlternativeCalcElection = "Do you want to make an interest allowance (alternative calculation) election for this return?"
  val electedInterestAllowanceAlternativeCalcBefore = "Has the group made an interest allowance (alternative calculation) election in any previous returns?"
  val groupEBITDAChargeableGainsElection = "Do you want to make a group-EBITDA (chargeable gains) election for this return?"
  val electedGroupEBITDABefore = "Has the group made a group-EBITDA (chargeable gains) election in any previous returns?"
  val groupRatioBlendedElection = "Are you making a blended group ratio election?"
  val enterQNGIE = "Enter the qualifying net group-interest expense (QNGIE)"
  val checkAnswersGroupStructure = "Check parent company details"
  val reviewNetTaxInterest = "Review the net tax-interest for companies in the group"
  val reviewTaxEBITDA = "Review the Tax-EBITDA for companies in the group"
  val enterANGIE = "Enter the adjusted net group-interest expense (ANGIE)"
  val groupRatioElection = "Are you making a group ratio election?"
  val checkAnswersAboutReturn = "Check answers - About the return"
  val reportingCompanyCTUTR = "UK Tax reference"
  val reportingCompanyName = "Reporting company name"
  val groupInterestAllowance = "What is the group interest allowance for the period?"
  val groupInterestCapacity = "What is the group interest capacity for the period?"
  val groupSubjectToReactivations = "Is the group subject to reactivations?"
  val groupSubjectToRestrictions = "Is the group subject to restrictions?"
  val infrastructureCompanyElection = "Has the group made the Infrastructure company election?"
  val interestAllowanceBroughtForward = "What is the group interest allowance brought forward?"
  val interestReactivationsCap = "What is the group reactivation cap?"
  val returnContainEstimates = "Does the return contain estimates?"
  val revisingReturn = "Are you revising a return you have already submitted?"
  val agentActingOnBehalfOfCompany = "Are you an agent acting on behalf of a company?"
  val agentName = "Agent name"
  val fullOrAbbreviatedReturn = "Do you want to submit a full or abbreviated return?"
  val reportingCompanyAppointed = "Has the group appointed a reporting company?"
  val reportingCompanyRequired = "You need to appoint a reporting company"
  val confirmation = "Return submitted"
  val continueSavedReturn = "Do you want to start a new return or continue working on a saved return?"
  val deemedParent = "Does the group have a ‘deemed’ parent company?"
  val parentCompanyName = "Enter the name of the parent company"
  val payTaxInUk: String => String = name => s"Does $name have a Unique Taxpayer Reference?"
  val reportingCompanySameAsParent: String => String = name => s"Is $name also the parent company?"
  val parentCompanySAUTR = "Parent company Self Assessment Unique Taxpayer Reference"
  val parentCompanyCTUTR = "Parent Company Corporation Unique Taxpayer Reference"
  val savedReturn = "Your return has been saved"
  val limitedLiabilityPartnership: String => String = name => s"Is $name a Limited Liability Partnership?"
  val countryOfIncorporation: String => String = name => s"Where is $name registered for tax?"
  val checkAnswersElections = "Check your answers for this section"
  val companyTaxEBITDA = "Enter company’s Tax-EBITDA"
  val ukCompaniesReviewAnswersList: Int => String = {
    case x if x > 1 => s"$x companies added"
    case _ => "1 company added"
  }


}
